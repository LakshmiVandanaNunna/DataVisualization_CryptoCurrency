{"ast":null,"code":"var _jsxFileName = \"/Users/nitin/Documents/GitHub/DL_project/DataVisualization_CryptoCurrency/src/component/CoinChart/CoinChart.component.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from 'react';\nimport { CartesianGrid, Line, LineChart, XAxis, YAxis, ResponsiveContainer, Legend, Tooltip } from 'recharts';\nimport { getCoinChart } from '../../utils/api';\nimport LoadingIndicator from '../LoadingIndicator';\nimport { ChartContainer } from './CoinChart.styles';\nimport { formatChartData } from './CoinChart.utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CoinChart(_ref) {\n  _s();\n\n  let {\n    coinId,\n    days\n  } = _ref;\n  const [coinChartData, setCoinChartData] = useState();\n  useEffect(() => {\n    getCoinChart(coinId, days).then(setCoinChartData);\n  }, [coinId, days]);\n  const formattedChartData = useMemo(() => coinChartData && formatChartData(coinChartData.prices), [coinChartData]);\n\n  if (!formattedChartData) {\n    return /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this);\n  } // Line Chart is visualized based on the data\n\n\n  return /*#__PURE__*/_jsxDEV(ChartContainer, {\n    children: /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        width: 800,\n        height: 300,\n        data: formattedChartData,\n        children: [/*#__PURE__*/_jsxDEV(Line, {\n          type: \"monotone\",\n          dataKey: \"price\",\n          dot: false,\n          stroke: \"#d884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n          stroke: \"#ccc\",\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          fontSize: \"12\",\n          dataKey: \"date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CoinChart, \"I6UIBMrY3sc40YjO3y+Db4X19q0=\");\n\n_c = CoinChart;\nexport default CoinChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"CoinChart\");","map":{"version":3,"sources":["/Users/nitin/Documents/GitHub/DL_project/DataVisualization_CryptoCurrency/src/component/CoinChart/CoinChart.component.tsx"],"names":["useEffect","useMemo","useState","CartesianGrid","Line","LineChart","XAxis","YAxis","ResponsiveContainer","Legend","Tooltip","getCoinChart","LoadingIndicator","ChartContainer","formatChartData","CoinChart","coinId","days","coinChartData","setCoinChartData","then","formattedChartData","prices"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C;AACA,SACEC,aADF,EACiBC,IADjB,EACuBC,SADvB,EACkCC,KADlC,EACyCC,KADzC,EACgDC,mBADhD,EACqEC,MADrE,EAC6EC,OAD7E,QAEO,UAFP;AAIA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAOC,gBAAP,MAA6B,qBAA7B;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,eAAT,QAAgC,mBAAhC;;;AAOA,SAASC,SAAT,OAAqD;AAAA;;AAAA,MAAlC;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAkC;AACnD,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,EAAlD;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,YAAY,CAACK,MAAD,EAASC,IAAT,CAAZ,CACGG,IADH,CACQD,gBADR;AAED,GAHQ,EAGN,CAACH,MAAD,EAASC,IAAT,CAHM,CAAT;AAKA,QAAMI,kBAAkB,GAAGpB,OAAO,CAChC,MAAMiB,aAAa,IAAIJ,eAAe,CAACI,aAAa,CAACI,MAAf,CADN,EAEhC,CAACJ,aAAD,CAFgC,CAAlC;;AAKA,MAAI,CAACG,kBAAL,EAAyB;AACvB,wBAAQ,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,YAAR;AACD,GAfkD,CAiBrD;;;AACE,sBACE,QAAC,cAAD;AAAA,2BACE,QAAC,mBAAD;AAAA,6BACE,QAAC,SAAD;AAAW,QAAA,KAAK,EAAE,GAAlB;AAAuB,QAAA,MAAM,EAAE,GAA/B;AAAoC,QAAA,IAAI,EAAEA,kBAA1C;AAAA,gCACE,QAAC,IAAD;AAAM,UAAA,IAAI,EAAC,UAAX;AAAsB,UAAA,OAAO,EAAC,OAA9B;AAAsC,UAAA,GAAG,EAAE,KAA3C;AAAkD,UAAA,MAAM,EAAC;AAAzD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,aAAD;AAAe,UAAA,MAAM,EAAC,MAAtB;AAA6B,UAAA,eAAe,EAAC;AAA7C;AAAA;AAAA;AAAA;AAAA,gBAFF,eAGE,QAAC,KAAD;AAAO,UAAA,QAAQ,EAAC,IAAhB;AAAqB,UAAA,OAAO,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA,gBAHF,eAIE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,gBAJF,eAKE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,gBALF,eAME,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GAhCQN,S;;KAAAA,S;AAkCT,eAAeA,SAAf","sourcesContent":["import { useEffect, useMemo, useState } from 'react';\nimport {\n  CartesianGrid, Line, LineChart, XAxis, YAxis, ResponsiveContainer, Legend, Tooltip,\n} from 'recharts';\nimport { CoinChartData } from '../../interfaces/CoinChartData';\nimport { getCoinChart } from '../../utils/api';\nimport LoadingIndicator from '../LoadingIndicator';\nimport { ChartContainer } from './CoinChart.styles';\nimport { formatChartData } from './CoinChart.utils';\n\ninterface CoinChartProps {\n  coinId: string;\n  days: number | 'max';\n}\n\nfunction CoinChart({ coinId, days }: CoinChartProps) {\n  const [coinChartData, setCoinChartData] = useState<CoinChartData>();\n\n  useEffect(() => {\n    getCoinChart(coinId, days)\n      .then(setCoinChartData);\n  }, [coinId, days]);\n\n  const formattedChartData = useMemo(\n    () => coinChartData && formatChartData(coinChartData.prices),\n    [coinChartData],\n  );\n\n  if (!formattedChartData) {\n    return (<LoadingIndicator />);\n  }\n\n// Line Chart is visualized based on the data\n  return (\n    <ChartContainer>\n      <ResponsiveContainer>\n        <LineChart width={800} height={300} data={formattedChartData}>\n          <Line type=\"monotone\" dataKey=\"price\" dot={false} stroke=\"#d884d8\" />\n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\n          <XAxis fontSize=\"12\" dataKey=\"date\" />\n          <YAxis />\n          <Tooltip />\n          <Legend />\n        </LineChart>\n      </ResponsiveContainer>\n    </ChartContainer>\n  );\n}\n\nexport default CoinChart;\n"]},"metadata":{},"sourceType":"module"}