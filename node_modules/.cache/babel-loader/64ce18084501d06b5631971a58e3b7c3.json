{"ast":null,"code":"var _jsxFileName = \"/Users/nitin/Documents/GitHub/DL_project/DataVisualization_CryptoCurrency/src/pages/HomePage.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport CoinList from '../component/CoinList';\nimport LoadingIndicator from '../component/LoadingIndicator';\nimport { getCoinList } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction HomePage() {\n  _s();\n\n  const [coins, setCoins] = useState([]);\n  const [isLoading, setIsLoading] = useState(true); // const [currentPage, setCurrentPage] = useState(1);\n\n  const fetchCoinPage = async () => {\n    try {\n      setIsLoading(true); // const coinPage = await getCoinList(currentPage);\n\n      const coinPage = await getCoinList(1);\n      setCoins(coinPage); // setCurrentPage(currentPage + 1);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchCoinPage();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CoinList, {\n      coins: coins\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true);\n}\n\n_s(HomePage, \"oYTRCL9hGfui4pVHtNc2v8JV+80=\");\n\n_c = HomePage;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/Users/nitin/Documents/GitHub/DL_project/DataVisualization_CryptoCurrency/src/pages/HomePage.tsx"],"names":["useEffect","useState","CoinList","LoadingIndicator","getCoinList","HomePage","coins","setCoins","isLoading","setIsLoading","fetchCoinPage","coinPage"],"mappings":";;;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,gBAAP,MAA6B,+BAA7B;AAEA,SAASC,WAAT,QAA4B,cAA5B;;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAgB,EAAhB,CAAlC;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,IAAD,CAA1C,CAFkB,CAGlB;;AAEA,QAAMS,aAAa,GAAG,YAAY;AAChC,QAAI;AACFD,MAAAA,YAAY,CAAC,IAAD,CAAZ,CADE,CAEF;;AACA,YAAME,QAAQ,GAAG,MAAMP,WAAW,CAAC,CAAD,CAAlC;AAEAG,MAAAA,QAAQ,CAACI,QAAD,CAAR,CALE,CAMF;AACD,KAPD,SAOU;AACRF,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,GAXD;;AAaAT,EAAAA,SAAS,CAAC,MAAM;AACdU,IAAAA,aAAa;AACd,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE;AAAA,4BACE,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEJ;AAAjB;AAAA;AAAA;AAAA;AAAA,YADF,EAEGE,SAAS,iBAAI,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,YAFhB;AAAA,kBADF;AAeD;;GArCQH,Q;;KAAAA,Q;AAuCT,eAAeA,QAAf","sourcesContent":["import { Button } from '@mui/material';\nimport { useEffect, useState } from 'react';\nimport CoinList from '../component/CoinList';\nimport LoadingIndicator from '../component/LoadingIndicator';\nimport { CoinSummary } from '../interfaces/CoinSummary';\nimport { getCoinList } from '../utils/api';\n\nfunction HomePage() {\n  const [coins, setCoins] = useState<CoinSummary[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  // const [currentPage, setCurrentPage] = useState(1);\n\n  const fetchCoinPage = async () => {\n    try {\n      setIsLoading(true);\n      // const coinPage = await getCoinList(currentPage);\n      const coinPage = await getCoinList(1);\n\n      setCoins(coinPage);\n      // setCurrentPage(currentPage + 1);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchCoinPage();\n  }, []);\n\n  return (\n    <>\n      <CoinList coins={coins} />\n      {isLoading && <LoadingIndicator />}\n      {/*{coins.length > 0 && !isLoading && (*/}\n      {/*  <Button*/}\n      {/*    onClick={fetchCoinPage}*/}\n      {/*    variant=\"contained\"*/}\n      {/*    color=\"primary\"*/}\n      {/*  >*/}\n      {/*    Load more*/}\n      {/*  </Button>*/}\n      {/*)}*/}\n    </>\n  );\n}\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}